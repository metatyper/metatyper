name: Publish on npm

on:
  workflow_dispatch:

jobs:
  check_version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      should_run: ${{ steps.check_tag.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
      - name: Get package version
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --exit-code --tags origin "refs/tags/v${{ steps.package_version.outputs.version }}" >/dev/null 2>&1; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "should_run=false"
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "should_run=true"
          fi

  build_and_publish:
    needs: check_version
    if: needs.check_version.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Enable Corepack for Yarn
        run: corepack enable
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: 20.x
          cache: 'yarn'

      - run: yarn install
      - run: yarn test
      - run: yarn build

      - id: publish
        name: publish to npm
        uses: JS-DevTools/npm-publish@v3
        with:
          registry: 'https://registry.npmjs.org'
          token: ${{ secrets.NPM_TOKEN }}
          provenance: true

      - if: steps.publish.outputs.type != 'none'
        run: |
          echo "Published ${{ steps.publish.outputs.type }} version: ${{ steps.publish.outputs.version }}"

      - name: publish skipped
        if: steps.publish.outputs.type == 'none'
        run: |
          echo "Version in package.json has not changed. Skipping."
          exit 0

      - name: configure changelog
        if: steps.publish.outputs.type != 'none'
        run: |
          echo '{"categories": [], "template": "## Commits:\n\n${{ '${{UNCATEGORIZED}}' }}", "pr_template": ${{ '"- ${{MERGE_SHA}} ${{TITLE}}"' }} }' > changelog_config.json
          cat changelog_config.json
          echo "last_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "curr_commit=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: generate changelog
        if: steps.publish.outputs.type != 'none'
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v2.9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          fromTag: "${{ env.last_tag }}"
          toTag: ${{ github.ref }}
          commitMode: true
          configuration: changelog_config.json

      - name: create release
        if: steps.publish.outputs.type != 'none'
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.publish.outputs.version }}
          release_name: v${{ steps.publish.outputs.version }}
          commitish: ${{ github.ref }}
          body: ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: false
